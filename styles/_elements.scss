@import "form/text";
@import "form/button";
@import "form/label";
@import "form/select";
@import "form/radio";
@import "form/checkbox";
@import "form/switch";
@import "form/tabs";
@import "form/fileupload";


// Link
.react-aria-Link {
  color: var(--link-color);
  font-size: 18px;
  transition: all 200ms;
  text-decoration: underline;
  cursor: pointer;
  outline: none;
  position: relative;

  &[data-hovered] {

  }

  &[data-pressed] {
    color: var(--link-color-pressed);
  }

  &[data-focus-visible]:after {
    content: '';
    position: absolute;
    inset: -3px -6px;
    border-radius: 6px;
    border: 2px solid var(--focus-ring-color);
  }
}

// Toggle Button
.react-aria-ToggleButton {
  color: var(--button-foreground);
  background: var(--button-background);
  border: 1px solid var(--border-color);
  forced-color-adjust: none;
  border-radius: 4px;
  appearance: none;
  vertical-align: middle;
  font-size: 1rem;
  text-align: center;
  margin: 0;
  outline: none;
  padding: 6px 10px;
  cursor: pointer;

  &[data-pressed] {
    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);
    background: var(--button-background-pressed);
    border-color: var(--border-color-pressed);
  }

  &[data-selected] {
    background: var(--highlight-background);
    border-color: var(--highlight-background);
    color: var(--highlight-foreground);

    &[data-pressed] {
      color: var(--highlight-foreground-pressed);
      background: var(--highlight-background-pressed);
      border-color: var(--highlight-background-pressed);
    }
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }
}


// Popover
.react-aria-Popover {
  --background-color: var(--overlay-background);

  border: 1px solid var(--border-color);
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 6px;
  background: var(--background-color);
  color: var(--text-color);
  outline: none;
  max-width: 250px;

  .react-aria-OverlayArrow svg {
    display: block;
    fill: var(--background-color);
    stroke: var(--border-color);
    stroke-width: 1px;
  }

  &[data-placement=top] {
    --origin: translateY(8px);

    &:has(.react-aria-OverlayArrow) {
      margin-bottom: 6px;
    }
  }

  &[data-placement=bottom] {
    --origin: translateY(-8px);

    &:has(.react-aria-OverlayArrow) {
      margin-top: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(180deg);
    }
  }

  &[data-placement=right] {
    --origin: translateX(-8px);

    &:has(.react-aria-OverlayArrow) {
      margin-left: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(90deg);
    }
  }

  &[data-placement=left] {
    --origin: translateX(8px);

    &:has(.react-aria-OverlayArrow) {
      margin-right: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(-90deg);
    }
  }

  &[data-entering] {
    animation: popover-slide 200ms;
  }

  &[data-exiting] {
    animation: popover-slide 200ms reverse ease-in;
  }
}

@keyframes popover-slide {
  from {
    transform: var(--origin);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}


// Toolbar
.react-aria-Toolbar {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;

  &[data-orientation=horizontal] {
    flex-direction: row;
  }

  .react-aria-Group {
    display: contents;
  }

  .react-aria-ToggleButton {
    width: 32px;
  }
}

.react-aria-Separator {
  align-self: stretch;
  background-color: var(--border-color);

  &[aria-orientation=vertical] {
    width: 1px;
    margin: 0px 10px;
  }
}

.react-aria-Toolbar {
  .react-aria-Button, .react-aria-ToggleButton {
    --button-background-pressed: transparent;
    --border-color: transparent;
    --button-background-highlight: transparent;


    background-color: transparent;
    font-weight: normal;
    box-sizing: border-box;
    padding: 3px 5px; // custom padding
    width: auto;
    border-radius: 5px;


    &[data-hovered="true"] {
      background-color: #e0e0e0;
       border-color: #cccccc;
      cursor: pointer;
    }

    &[data-focus-visible="true"] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: 2px;
    }

    &[data-pressed="true"] {
      background-color: #ccc;
    }

    &[data-selected="true"] {
      background-color: #eee;
      border: 1px solid #000;
    }
  }

  .toolbar-break {
    width: 100%;
  }
}

// Menu
.react-aria-Menu {
  max-height: inherit;
  box-sizing: border-box;
  overflow: auto;
  padding: 2px;
  min-width: 150px;
  box-sizing: border-box;
  outline: none;

  .react-aria-Separator {
    height: 1px;
    background: var(--border-color);
    margin: 2px 4px;
  }
}

.react-aria-MenuItem {
  margin: 2px;
  padding: 0.286rem 0.571rem;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;
  position: relative;
  display: grid;
  grid-template-areas: "label kbd"
                      "desc  kbd";
  align-items: center;
  column-gap: 20px;
  forced-color-adjust: none;

  &[data-focused] {
    background: var(--highlight-background);
    color: var(--highlight-foreground);
  }
}


// Dialog
.react-aria-Dialog {
  outline: none;
  padding: 30px;
  max-height: inherit;
  box-sizing: border-box;
  overflow: auto;

  .react-aria-Heading[slot=title] {
    line-height: 1em;
    margin-top: 0;
  }

  // Table
  .react-aria-Table {
    padding: 0.286rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--overlay-background);
    outline: none;
    border-spacing: 0;
    min-height: 100px;
    align-self: start;
    max-width: 100%;
    word-break: break-word;
    forced-color-adjust: none;

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }

    .react-aria-TableHeader {
      color: var(--text-color);

      &:after {
        content: '';
        display: table-row;
        height: 2px;
      }

      & tr:last-child .react-aria-Column {
        border-bottom: 1px solid var(--border-color);
        cursor: default;
      }
    }

    .react-aria-Row {
      --radius-top: 6px;
      --radius-bottom: 6px;
      --radius: var(--radius-top) var(--radius-top) var(--radius-bottom) var(--radius-bottom);
      border-radius: var(--radius);
      clip-path: inset(0 round var(--radius)); /* firefox */
      outline: none;
      cursor: default;
      color: var(--text-color);
      font-size: 1.072rem;
      position: relative;
      transform: scale(1);

      &[data-focus-visible] {
        outline: 2px solid var(--focus-ring-color);
        outline-offset: -2px;
      }

      &[data-pressed] {
        background: var(--gray-100);
      }

      &[data-selected] {
        background: var(--highlight-background);
        color: var(--highlight-foreground);
        --focus-ring-color: var(--highlight-foreground);

        &[data-focus-visible],
        .react-aria-Cell[data-focus-visible] {
          outline-offset: -4px;
        }
      }

      &[data-disabled] {
        color: var(--text-color-disabled);
      }
    }

    .react-aria-Cell,
    .react-aria-Column {
      padding: 4px 8px;
      text-align: left;
      outline: none;

      &[data-focus-visible] {
        outline: 2px solid var(--focus-ring-color);
        outline-offset: -2px;
      }
    }

    .react-aria-Cell {
      transform: translateZ(0);

      &:first-child {
        border-radius: var(--radius-top) 0 0 var(--radius-bottom);
      }

      &:last-child {
        border-radius: 0 var(--radius-top) var(--radius-bottom) 0;
      }
    }

    /* join selected items if :has selector is supported */
    @supports selector(:has(.foo)) {
      .react-aria-Row[data-selected]:has(+ [data-selected]),
      .react-aria-Row[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {
        --radius-bottom: 0px;
      }

      .react-aria-Row[data-selected] + [data-selected],
      .react-aria-Row[data-selected] + .react-aria-DropIndicator + [data-selected] {
        --radius-top: 0px;
      }
    }
  }

  :where(.react-aria-Row) .react-aria-Checkbox {
    --selected-color: var(--highlight-foreground);
    --selected-color-pressed: var(--highlight-foreground-pressed);
    --checkmark-color: var(--highlight-background);
    --background-color: var(--highlight-background);
  }
}

.react-aria-ModalOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: var(--visual-viewport-height);
  background: rgba(0 0 0 / .5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 100;

  &[data-entering] {
    animation: modal-fade 200ms;
  }

  &[data-exiting] {
    animation: modal-fade 150ms reverse ease-in;
  }
}

.react-aria-Modal {
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 6px;
  background: var(--overlay-background);
  color: var(--text-color);
  border: 1px solid var(--gray-400);
  outline: none;
  width: 95%;
  max-width: 600px;
  max-height: 80vh;


  &[data-entering] {
    animation: modal-zoom 300ms cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .react-aria-TextField {
    margin-bottom: 8px;
  }

  /* We want buttons to be side by side on larger screens
  but stack on top of each other on mobile*/

  .modal-actions {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 1rem;
    margin-top: 1rem;

    @include device(xl) {
      flex-direction: row-reverse;
    }

    > div {
      flex: 1 1 auto;
      max-width: 100%;
    }

    button {
      display: flex;
      align-items: center;
      justify-content: center;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 100%; // allows stacking gracefully
      text-align: center;
    }
  }
}

@keyframes modal-fade {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes modal-zoom {
  from {
    transform: scale(0.8);
  }

  to {
    transform: scale(1);
  }
}

.react-aria-Breadcrumbs {
  display: flex;
  align-items: flex-start;
  list-style: none;
  padding: 0;
  font-size: 0.8rem;
  color: var(--text-color);
  margin: 0 0 1rem;
  overflow: hidden;

  @media (max-width: 675px) {
    /* Hide all breadcrumbs by default */
    li {
      display: none !important; /* Ensure no conflicts with other styles */
    }

    /* Show the first breadcrumb (Home) if there are exactly 3 breadcrumbs */
    li:first-child:nth-last-child(3) {
      display: inline-flex !important;
    }

    /* Show the second-to-last breadcrumb (Dashboard) if there are exactly 3 breadcrumbs */
    li:nth-last-child(2):not([data-current="true"]):nth-last-child(3) {
      display: inline-flex !important;
    }

    /* Show the third-to-last breadcrumb (second-to-last visible) if it’s not current */
    li:nth-last-child(3):not([data-current="true"]) {
      display: inline-flex !important;
    }

    /* Show the second-to-last breadcrumb if it’s not current */
    li:nth-last-child(2):not([data-current="true"]) {
      display: inline-flex !important;
    }

    /* Show the last breadcrumb if it’s not current */
    li:nth-last-child(1):not([data-current="true"]) {
      display: inline-flex !important;
    }
  }

  li {
    font-size: 0.8rem;
    white-space: nowrap;
    margin-right: 0.5rem;
    padding-right: 0.5rem;
    position: relative;

    &[data-current] {
      color: var(--text-color);
      font-weight: bold;
    }
  }

  li:not(:last-child)::after {
    content: '›';
    padding: 0;
    position: absolute;
    right: -2px;
    white-space: nowrap;
  }

  .react-aria-Link {
    font-size: 0.8rem;
    color: var(--link-color-secondary);
    outline: none;
    text-decoration: none;
    cursor: pointer;

    @media (max-width: 675px) {
      max-width: 180px;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    &[data-hovered] {
      text-decoration: underline;
    }
  }
}

.Filters {
  margin: 1rem 0;
  display: grid;
  gap: 20px;
  grid-template-columns: 1fr 1fr;
}

.searchSection {
  display: grid;
  grid-template-columns: 1fr;  /* Single column by default (mobile) */
  gap: 20px;

}

@media (min-width: 768px) {
  .searchSection {
    grid-template-columns: 1fr 1fr;  /* Two equal columns on larger screens */
  }
}

.card-grid-list {
  margin-top: var(--space-4);
  margin-bottom: var(--space-8);
  display: grid;
  gap: var(--space-5);
  @include device(md) {
    grid-template-columns: repeat(2, 1fr);
  }

  @include device(xl) {
    grid-template-columns: repeat(3, 1fr);
  }
}


// This is used to contain the content of a section
.sectionContainer {
  margin-top: var(--space-6);
  margin-bottom: var(--space-6);

  .sectionHeader {
    h3 {
      margin: 0 0 var(--space-4);
    }
  }

  .sectionContent {
    padding: var(--space-4) var(--space-6);
    margin-bottom: var(--space-4);
    border-radius: var(--card-border-radius);
    background: var(--bg-white);
    box-shadow: var(--card-shadow);
    border: 1px solid var(--card-border);
  }
}

// project overview
.project-overview {
  .project-overview-item {
    margin-top: var(--space-0);
    margin-bottom: var(--space-6);
    font-size: var(--fs-small);

    h2 {
      font-size: var(--fs-base);
      color: var(--blue-600);
      font-weight: 600;

      padding: var(--space-0);
      margin: var(--space-0);
      margin-bottom: var(--space-1);
    }

    h3 {
      font-size: var(--fs-base);
      color: var(--blue-600);
      font-weight: 600;

      padding: var(--space-0);
      margin: var(--space-0);
      margin-bottom: var(--space-1);
    }

    p {
      font-size: var(--fs-small);
      padding: var(--space-0);
      margin: var(--space-0);
    }

    .project-overview-item-heading {
      font-size: var(--fs-lg);
    }

    .react-aria-Link {
      font-size: var(--fs-small);
      color: var(--slate-800);
      margin-top: var(--space-1);
      display: inline-block;
    }
  }
}


.plans {
  .plans-header-with-actions {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-2);
    flex-direction: column;
    gap: var(--space-2);
    @include device(sm) {
      flex-direction: row;
      align-items: center;
      margin-bottom: var(--space-2);
    }
    .actions{
      @include device(sm) {
        flex-direction: row;
        align-items: center;
      }
      a{
        margin-bottom: var(--space-1);
      }
    }
  }

  .plan-item {

  }

  .plan-sections-list {
    padding: 0;
    margin: var(space-4) 0;
    list-style: none;
  }

  .plan-sections-list-item {
    font-size: var(--fs-small);
    color: var(--body-color);
    margin: var(--space-2) 0;

    a {
      font-size: var(--fs-base);
      color: var(--text-black);
      text-decoration: underline;
      text-underline-offset: 2px;
    }

    .plan-sections-list-item-progress {
      display: block;
      @include device(sm) {
        display: inline-block;
        margin-left: var(--space-3);
      }
    }
  }

  .plan-meta {
    margin-top: var(--space-6);

    p {
      font-size: var(--fs-small);
      color: var(--body-color);
      margin: var(--space-2) 0;
    }
  }

  .plan-links {
    display: flex;
    flex-direction: column;
    @include device(md) {
      flex-direction: row;
      gap: var(--space-4);
    }

    .plan-link {
      font-size: var(--fs-small);
      color: var(--body-color);

      .link-text {
        text-decoration: underline;
        text-underline-offset: 2px;

        &:hover {
          color: var(--text-black);
        }
      }

      &:hover {
        text-decoration: none;
      }
    }
  }

  .plan-footer {
    margin-top: var(--space-4);
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: var(--space-4);
    flex-direction: column;
    @include device(md) {
      flex-direction: row;
      align-items: center;
    }
  }
}

.form-signpost{
  .form-signpost-inner{
    background: var(--gray-100);
    padding: var(--space-4);
  }
}

.react-aria-CalendarCell {
  cursor: pointer;
}

.side-panel {
  .react-aria-Link {
    font-size: var(--fs-small);
    color: var(--slate-800);
    margin-top: var(--space-1);
    display: inline-block;
  }
}






/* --- Basic ProseMirror Table Styling --- */
.ProseMirror table,
.editor-content table {
  width: 100%;
  border-collapse: collapse;
  margin: 1rem 0;
  border: 1px solid #ccc;
}

/* Style table header (th) and data cells (td) */
.ProseMirror th,
.ProseMirror td,
.editor-content th,
.editor-content td {
  border: 1px solid #ccc;
  padding: var(--space-1);
  text-align: left;
  vertical-align: top;
}

/* Style header cells specifically */
.ProseMirror th,
.editor-content th {
  background-color: #f2f2f2;
  font-weight: bold;
}

/* Add hover effect to rows for better readability */
.ProseMirror tbody tr:hover,
.editor-content tbody tr:hover {
  background-color: #f9f9f9;
}
