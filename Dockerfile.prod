# Stage 1: Dependencies
# preferred node version chosen here (Active LTS = 22 as of 10/2024)
FROM public.ecr.aws/docker/library/node:22.1.0-alpine3.19 as deps
WORKDIR /app

# Copy package.json and package-lock.json
# to the /app working directory
COPY package*.json ./


# Set production environment before installing dependencies to omit devDependencies
ENV NODE_ENV=production

# Install dependencies in /app (excluding devDependencies)
RUN npm ci

#Stage 2: Buildergit s
FROM public.ecr.aws/docker/library/node:22.1.0-alpine3.19 as builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set production environment
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV=production

# Set environment variables
ENV NEXT_PUBLIC_SERVER_ENDPOINT=$NEXT_PUBLIC_SERVER_ENDPOINT
ENV NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL

# Build the application
RUN npm run build

# Stage 3: Runner
FROM public.ecr.aws/docker/library/node:22.1.0-alpine3.19 as runner
WORKDIR /app

# Install bash so we can use session manager to attach to the container
# and perform container health checks
RUN apk add --no-cache bash curl

# Set production environment
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

#Switch to non-root user
USER nextjs

# Ensure port 3000 is accessible to our system
EXPOSE 3000

# Set hostname
ENV HOSTNAME 0.0.0.0

# Start the application
CMD ["node", "server.js"]